<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import '@/api.js'
export default class extends wepy.app {
  config = {
    pages: [
      'pages/tabs/home',
      'pages/tabs/cates',
      'pages/tabs/search',
      'pages/tabs/cart',
      'pages/tabs/me',
      // 商品详情页面
      'pages/goods_detail/main',
      // 商品列表页面
      'pages/goods_list',
      // 支付页面
      'pages/order'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#d81e06',
      navigationBarTitleText: '优购商城',
      navigationBarTextStyle: 'white'
    },
    tabBar: {
      // 选中的文本颜色
      selectedColor: '#d81e06',
      // 所有 tabBar 节点的配置数组
      list: [
        {
          // 页面路径
          pagePath: 'pages/tabs/home',
          // 显示的文本
          text: '首页',
          // 默认图标路径
          iconPath: '/assets/icons/home.png',
          // 选中之后的图标路径
          selectedIconPath: '/assets/icons/home-active.png'
        },
        {
          pagePath: 'pages/tabs/cates',
          text: '分类',
          iconPath: '/assets/icons/cates.png',
          selectedIconPath: '/assets/icons/cates-active.png'
        },
        {
          pagePath: 'pages/tabs/search',
          text: '搜索',
          iconPath: '/assets/icons/search.png',
          selectedIconPath: '/assets/icons/search-active.png'
        },
        {
          pagePath: 'pages/tabs/cart',
          text: '购物车',
          iconPath: '/assets/icons/cart.png',
          selectedIconPath: '/assets/icons/cart-active.png'
        },
        {
          pagePath: 'pages/tabs/me',
          text: '我的',
          iconPath: '/assets/icons/my.png',
          selectedIconPath: '/assets/icons/my-active.png'
        }
      ]
    },
    usingComponents: {
      // 商品分类侧边导航
      'van-sidebar': './assets/vant/sidebar/index',
      'van-sidebar-item': './assets/vant/sidebar-item/index',
      // 商品分类layout布局
      'van-row': './assets/vant/row/index',
      'van-col': './assets/vant/col/index',
      // 搜索模块搜索框
      'van-search': './assets/vant/search/index',
      // cell单元格
      'van-cell': './assets/vant/cell/index',
      'van-cell-group': './assets/vant/cell-group/index',
      // 图标
      'van-icon': './assets/vant/icon/index',
      'van-tag': './assets/vant/tag/index',
      // 商品列表
      'van-card': './assets/vant/card/index',
      // 商品详情页tab切换
      'van-tab': './assets/vant/tab/index',
      'van-tabs': './assets/vant/tabs/index',
      // 商品详情页商品导航
      'van-goods-action': './assets/vant/goods-action/index',
      'van-goods-action-icon': './assets/vant/goods-action-icon/index',
      'van-goods-action-button': './assets/vant/goods-action-button/index',
      wxparse: './assets/wxparse/wxparse',
      // stepper步进器，用于购物车商品的加减
      'van-stepper': './assets/vant/stepper/index',
      // 购物车使用的复选框
      'van-checkbox': './assets/vant/checkbox/index',
      // 商品提交组件
      'van-submit-bar': './assets/vant/submit-bar/index',
      // 滑动删除商品
      'van-swipe-cell': './assets/vant/swipe-cell/index',
      'van-button': './assets/vant/button/index'
    }
  }

  globalData = {
    // 全局保存购物车数据
    cart: [],
    // 加入购物车已经勾选的商品数量
    total: 0
  }
  // 全局定义操作购物车数据的方法
  changeCartData(goods) {
    const i = this.globalData.cart.findIndex(function(x) {
      return x.id === goods.goods_id
    })
    if (i !== -1) {
      this.globalData.cart[i].count++
      this.saveCartData()
      return
    }
    const info = {
      // 商品Id
      id: goods.goods_id,
      // 名称
      name: goods.goods_name,
      // 图片
      pic: goods.goods_small_logo,
      // 价格
      price: goods.goods_price,
      // 数量
      count: 1,
      // 是否默认被选中
      isCheck: true
    }
    this.globalData.cart.push(info)
    this.saveCartData()
  }
  // 根据商品的id修改商品的数量
  changeCountById(id, count) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      this.globalData.cart[i].count = count
      this.saveCartData()
    }
  }
  // 根据商品的id修改商品的选中状态
  changeCheckById(id, check) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      this.globalData.cart[i].isCheck = check
      this.saveCartData()
    }
  }
  // 根据商品id删除对应的商品
  deleteById(id) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      this.globalData.cart.splice(i, 1)
      this.saveCartData()
    }
  }
  // 根据全选框的状态修改所以商品的状态
  changeCheckByFull(check) {
    this.globalData.cart.forEach(item => {
      item.isCheck = check
    })
    this.saveCartData()
  }
  constructor() {
    super()
    this.use('requestfix')
    // 开启Promise功能，这样，异步API调用的结果，返回值是Promise对象
    this.use('promisify')
    // intercept(api:String, provider:Object)：使用拦截器对原生API请求进行拦截。
    this.intercept('request', {
      config(p) {
        // 发起网路请求时，添加loading效果，微信原生api
        wepy.showLoading({
          title: '数据加载中...'
        })
        return p
      },
      success(p) {
        return p
      },
      fail(p) {
        return p
      },
      complete(p) {
        // 隐藏loading效果
        wepy.hideLoading()
      }
    })
  }
  // 保存购物车数据到本地
  saveCartData() {
    wepy.setStorageSync('cart', this.globalData.cart)
    this.addCartBadge()
  }
  // 给购物车加上数字角标
  async addCartBadge() {
    // 计算勾选的商品数量
    let c = 0
    this.globalData.cart.forEach(item => {
      if (item.isCheck) {
        c += item.count
      }
    })
    const res = await wepy
      .setTabBarBadge({
        index: 3,
        text: c + ''
      })
      .catch(err => err)
    this.globalData.total = c
    // 设置 tabBar 的徽章失败！
    if (res.errMsg !== 'setTabBarBadge:ok') {
    }
  }
  onLaunch() {
    console.log('小程序启动了')
    this.globalData.cart = wepy.getStorageSync('cart') || []
    this.addCartBadge()
  }
}
</script>
